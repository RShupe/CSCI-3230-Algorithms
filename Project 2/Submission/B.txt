using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	File Name:         Program.cs
//	Description:       This is the project file for Part B, Project 2
//
//	Course:            CSCI 3230 - Algorithms
//	Author:            Ryan Shupe, shuper@etsu.edu, East Tennessee State University.
//	Created:           Wednesday, Mar 04 2020
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
namespace P2B
{
    internal class Program
    {
        private static int[] numOnB;         //number of points on the B line
        private static int[] tree;      //tree to hold the number of cookies
        private static int[] cookieNums;        //tree to hold ht max number of cookies at  Y

        /// <summary>
        /// Main - The method that drives the program.
        /// </summary>
        /// <param name="string[] args"></param>
        ///
        public static void Main(string[] args)
        {
            Stopwatch sw = new Stopwatch();                           //creates stopwatch
            int testCases = Convert.ToInt32(Console.ReadLine());      //the number of test cases
            Console.WriteLine();
            String[] output = new String[testCases];                  //space to hold the results that the number of testcases give
            sw.Start();						      //start the stopwatch

            for (int i = 0; i < testCases; i++)
            {
                output[i] = Calculate();        //store the numbers in an array for output later
            }
            sw.Stop();						      //stop the stopwatch

            for (int i = 0; i < output.Length; i++)
            {
                Console.WriteLine(output[i]);   //writes the output array that is calculated
            }

            Console.WriteLine("Time used: " + sw.Elapsed.TotalMilliseconds / 1000 + " seconds.");
            Console.ReadLine();
        }

        /// <summary>
        /// Calculate - This method fills an array of points and then generates a tree and calculates the maximum number of cookies that Brenda can get
        /// </summary>
        /// <return name="output"></param>
        ///
        private static String Calculate()
        {
            int N = 1000000;		//create enough space to build the tree
            tree = new int[N * 4];  //create enough space to hold the tree's values
            cookieNums = new int[N * 4];    //hold the max number of cookies at Y point
            numOnB = new int[N]; //number of cookies above line B for specific Y value

            int output = 0;     //int to hold the output number
            List<int>[] numberOfYPoints = new List<int>[N]; //record the number of points on Y
            for (int i = 0; i < numberOfYPoints.Length; i++)
            {
                numberOfYPoints[i] = new List<int>();           //build list of lists of Y coords
            }

            int numLines = int.Parse(Console.ReadLine());       //get number of coord points input by user

            for (int i = numLines; i > 0; i--)
            {
                String instring = Console.ReadLine();           //create a string to hold the user input

                string[] values = instring.Split(' ');          //create a string array and split the input into two seperate numbers

                Point inPoint = new Point(Convert.ToInt32(values[0]), Convert.ToInt32(values[1]));  //create a point object to store the two coords

                numberOfYPoints[inPoint.X].Add(inPoint.Y);       //list of Y points for each X
                numOnB[inPoint.Y] += 1;                          //increment number of points on Y
            }

            for (int i = 1001; i >= 0; i--)
            {
                numOnB[i] += numOnB[i + 1]; //get the number of cookies above line B for the current Y
            }

            GenerateTree(1, 0, 1001);       //build a tree holding the number of cookies for each point so we can easily get the number of cookies

            for (int x = 0; x <= 1001; x++)
            {
                output = Math.Max(output, tree[1]);  //check to see if the current ouput is larger than the value at tree[1]

                for (int y = 0; y < numberOfYPoints[x].Count; y++)
                {
                    CookieCount(1, -1, 0, numberOfYPoints[x][y], 0, 1001); //get the cookiecount for each half of the plane
                    CookieCount(1, 1, numberOfYPoints[x][y] + 1, 1001, 0, 1001);
                }
            }

            output = (Math.Max(output, tree[1]));//check to see if the current ouput is larger than the value at tree[1]
            return output.ToString(); //return the number of cookies in string form to display.
        }

        /// <summary>
        /// Generate Tree - This method generates a tree and places the number of cookies in each leaf.
        /// </summary>
        /// <param name="index"></param>
        /// <param name="treeLeft"></param>
        /// <param name="treeRight"></param>
        ///
        private static void GenerateTree(int index, int treeLeft, int treeRight)
        {
            cookieNums[index] = 0;       //clears out the current spot in the array
            if (treeLeft == treeRight)
            {
                tree[index] = numOnB[treeLeft]; //set the number in the tree the number of cookies on B at the left tree index
            }
            else
            {
                int mid = (treeLeft + treeRight) / 2;      //get the midpoint of the tree
                int temp = index * 2; //hold the index * 2
                GenerateTree(temp, treeLeft, mid);        //analyze the left half of the tree
                GenerateTree(temp + 1, mid + 1, treeRight);     //analyze the right half of the tree
                tree[index] = Math.Min(tree[temp], tree[temp + 1]);  //find minimum of the counted number of cookies in the indexes next to each other
            }
            return;
        }

        /// <summary>
        /// Cookie Count - This method generates a maximum amount of cookies from a point and finds the max in each half
        /// </summary>
        /// <param name="index"></param>
        /// <param name="treeLeft"></param>
        /// <param name="treeRight"></param>
        /// <param name="left"></param>
        /// <param name="right"></param>
        /// <param name="currentValue"></param>
        ///
        private static void CookieCount(int index, int currentValue, int left, int right, int treeLeft, int treeRight)
        {
            if (treeLeft == left && treeRight == right)
            {
                tree[index] += currentValue;    //add the current value to the value at the index in the tree
                cookieNums[index] += currentValue;  //add the value at the same index  in cookieNums
            }
            else if (left > right) //make sure there are vertical lines left to analyze
            {//if the left is greater do nothing
            }
            else
            {
                SaveCookieNum(index);
                int temp = index * 2; //hold the index * 2
                int TreeMid = (treeLeft + treeRight) / 2; //get the midpoint index of the tree
                CookieCount(temp, currentValue, left, Math.Min(right, TreeMid), treeLeft, TreeMid);
                CookieCount(temp + 1, currentValue, Math.Max(TreeMid + 1, left), right, TreeMid + 1, treeRight); //recursivly call the Cookies Count function to get the number of cookies on Y
                tree[index] = Math.Min(tree[temp], tree[temp + 1]); //compare the number of cookies from the two recursivly called functions and store the minumum of the two at the index in the tree
            }

            return;
        }

        /// <summary>
        /// SaveCookieNum - this method saves the current maximum number of cookies
        /// </summary>
        /// <param name="index"></param>
        ///
        private static void SaveCookieNum(int index)
        {
            if (cookieNums[index] != 0)
            {
                int temp = index * 2;   //temp variable to save the index times 2
                tree[temp] += cookieNums[index]; //add the number in the tree to the number of cookies at the index
                tree[temp + 1] += cookieNums[index]; //update the next position as well
                cookieNums[temp] += cookieNums[index]; //update the number of cookies at the new index
                cookieNums[temp + 1] += cookieNums[index];//update the next position too
                cookieNums[index] = 0;  //clear the previous value
            }

            return;
        }
    }
}